// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

model User {
  id              String      @id @default(cuid())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  username        String      @unique
  usernameLower   String      @unique
  email           String      @unique
  passwordHash    String
  isVerified      Boolean
  role            Role        @default(USER)
  favoritePlayers Player[]    @relation("UserFavoritePlayers")
  likedMilestones Milestone[] @relation("UserLikesMilestone")
}

model Conference {
  id           String     @id @default(cuid())
  season       String
  conferenceId Int
  link         String
  name         String
  shortName    String
  abbreviation String
  active       Boolean
  divisions    Division[]
  teams        Team[]

  @@unique([conferenceId, season])
}

model Division {
  id           String     @id @default(cuid())
  season       String
  divisionId   Int
  link         String
  name         String
  shortName    String
  abbreviation String
  active       Boolean
  conference   Conference @relation(fields: [conferenceId], references: [id])
  conferenceId String
  teams        Team[]

  @@unique([divisionId, season])
}

model Team {
  id                 String      @id @default(cuid())
  season             String
  teamId             Int
  link               String
  siteLink           String
  name               String
  teamName           String
  shortName          String
  abbreviation       String
  locationName       String
  firstYearOfPlay    Int
  officialSiteUrl    String
  active             Boolean
  twitterHashtag     String
  conference         Conference  @relation(fields: [conferenceId], references: [id])
  conferenceId       String
  division           Division    @relation(fields: [divisionId], references: [id])
  divisionId         String
  players            Player[]    @relation("TeamPlayer")
  awayGames          Game[]      @relation("TeamAwayGames")
  homeGames          Game[]      @relation("TeamHomeGames")
  linescores         Linescore[] @relation("TeamLinescore")
  opponentLinescores Linescore[] @relation("OpponentLinescore")
  milestones         Milestone[] @relation("TeamMilestone")
  milestonesAgainst  Milestone[] @relation("TeamMilestoneAgainst")
  goalData           GoalData[]  @relation("TeamGoalData")

  @@unique([season, teamId])
}

model Linescore {
  id                            String  @id @default(cuid())
  win                           Boolean
  otWin                         Boolean
  shootOutWin                   Boolean
  loss                          Boolean
  ot                            Boolean
  gamePk                        Int
  isHomeGame                    Boolean
  points                        Int
  goalsFor                      Int
  goalsAgainst                  Int
  penaltyMinutes                Int
  shotsFor                      Int
  shotsAgainst                  Int
  powerPlayGoals                Int
  powerPlayGoalsAllowed         Int
  powerPlayOpportunities        Int
  powerPlayOpportunitiesAgainst Int
  faceOffsTaken                 Int
  faceOffWins                   Int
  blocked                       Int
  takeaways                     Int
  giveaways                     Int
  team                          Team    @relation("TeamLinescore", fields: [teamId], references: [id])
  teamId                        String
  opponent                      Team    @relation("OpponentLinescore", fields: [opponentId], references: [id])
  opponentId                    String

  @@unique([gamePk, teamId])
}

enum ShootsCatches {
  L
  R
}

enum RosterStatus {
  N
  Y
}

enum Position {
  L
  G
  D
  R
  C
}

model Player {
  id                 String           @id @default(cuid())
  playerId           Int              @unique
  firstName          String
  lastName           String
  primaryNumber      Int
  link               String
  siteLink           String
  birthDate          DateTime
  birthCity          String
  birthStateProvince String?
  birthCountry       String
  nationality        String
  height             Int
  weight             Int
  alternateCaptain   Boolean
  captain            Boolean
  rookie             Boolean
  shootsCatches      ShootsCatches
  rosterStatus       RosterStatus
  primaryPosition    Position
  active             Boolean
  currentTeam        Team             @relation("TeamPlayer", fields: [teamId], references: [id])
  teamId             String
  skaterBoxscores    SkaterBoxscore[] @relation("PlayerSkaterBoxscores")
  goalieBoxscores    GoalieBoxscore[] @relation("PlayerGoalieBoxscores")
  goalDataGoal       GoalData[]       @relation("PlayerGoalDataGoal")
  goalDataAssist1    GoalData[]       @relation("PlayerGoalDataAssist1")
  goalDataAssist2    GoalData[]       @relation("PlayerGoalDataAssist2")
  goalDataGoalie     GoalData[]       @relation("PlayerGoalDataGoalie")
  milestones         Milestone[]      @relation("PlayerMilestone")
  favoritedBy        User[]           @relation("UserFavoritePlayers", references: [id])
}

enum GameType {
  R
  P
}

model Game {
  id              String           @id @default(cuid())
  gamePk          Int              @unique
  liveLink        String           @unique
  contentLink     String           @unique
  gameDate        DateTime
  apiDate         DateTime
  gameType        GameType
  awayScore       Int
  homeScore       Int
  awayTeam        Team             @relation("TeamAwayGames", fields: [awayTeamId], references: [id])
  awayTeamId      String
  homeTeam        Team             @relation("TeamHomeGames", fields: [homeTeamId], references: [id])
  homeTeamId      String
  skaterBoxscores SkaterBoxscore[] @relation("GameSkaterBoxscores")
  goalieBoxscores GoalieBoxscore[] @relation("GameGoalieBoxscores")
  goalData        GoalData[]       @relation("GameGoals")
  gameRecap       Highlight?       @relation("GameHighlightRecap")
  gameCondensed   Highlight?       @relation("GameHighlightCondensed")
}

enum Decision {
  L
  W
}

model SkaterBoxscore {
  id                   String   @id @default(cuid())
  gamePk               Int
  gameDate             DateTime
  timeOnIce            Int
  assists              Int
  goals                Int
  points               Int
  hits                 Int
  powerPlayGoals       Int
  powerPlayAssists     Int
  penaltyMinutes       Int
  faceOffsTaken        Int
  faceOffWins          Int
  takeaways            Int
  giveaways            Int
  shortHandedGoals     Int
  shortHandedAssists   Int
  blocked              Int
  plusMinus            Int
  evenTimeOnIce        Int
  powerPlayTimeOnIce   Int
  shortHandedTimeOnIce Int
  player               Player   @relation("PlayerSkaterBoxscores", fields: [playerId], references: [id])
  playerId             String
  game                 Game     @relation("GameSkaterBoxscores", fields: [gameId], references: [id])
  gameId               String

  @@unique([playerId, gameId])
}

model GoalieBoxscore {
  id                      String   @id @default(cuid())
  gamePk                  Int
  gameDate                DateTime
  timeOnIce               Int
  assists                 Int
  goals                   Int
  saves                   Int
  powerPlaySaves          Int
  shortHandedSaves        Int
  evenSaves               Int
  shortHandedShotsAgainst Int
  powerPlayShotsAgainst   Int
  decision                Decision
  shotsAgainst            Int
  penaltyMinutes          Int
  savePct                 Float
  evenSavePct             Float
  powerPlaySavePct        Float
  player                  Player   @relation("PlayerGoalieBoxscores", fields: [playerId], references: [id])
  playerId                String
  game                    Game     @relation("GameGoalieBoxscores", fields: [gameId], references: [id])
  gameId                  String

  @@unique([playerId, gameId])
}

enum MilestoneType {
  GOAL
  SHOT
}

model Milestone {
  id                          String        @id @default(cuid())
  gamePk                      Int
  gameDate                    DateTime
  apiDate                     DateTime
  teamId                      Int
  opponentId                  Int
  playerId                    Int
  eventId                     Int
  type                        MilestoneType
  periodTime                  Int
  periodNumber                Int
  team                        Team          @relation("TeamMilestone", fields: [teamId_TeamMilestone], references: [id])
  teamId_TeamMilestone        String
  opponent                    Team          @relation("TeamMilestoneAgainst", fields: [opponentId_MilestoneAgainst], references: [id])
  opponentId_MilestoneAgainst String
  player                      Player        @relation("PlayerMilestone", fields: [playerId_PlayerMilestone], references: [id])
  playerId_PlayerMilestone    String
  goalData                    GoalData?     @relation("MilestoneGoalData")
  goalDataId                  String?
  highlight                   Highlight?    @relation("MilestoneHighlight")
  likedBy                     User[]        @relation("UserLikesMilestone", references: [id])
  comments                    Comment[]     @relation("MilestoneHasComments")

  highlightId String
  @@unique([gamePk, eventId])
}

enum PeriodType {
  REGULAR
  OVERTIME
  SHOOTOUT
}

model GoalData {
  id              String        @id @default(cuid())
  gameWinningGoal Boolean
  emptyNet        Boolean
  gamePk          Int
  apiDate         DateTime
  type            MilestoneType
  shotType        String
  eventIdx        Int
  eventId         Int
  periodType      PeriodType
  dateTime        DateTime
  coordX          Int
  coordY          Int
  game            Game          @relation("GameGoals", fields: [gameId], references: [id])
  gameId          String
  scorer          Player        @relation("PlayerGoalDataGoal", fields: [scorerId], references: [id])
  scorerId        String
  assist1         Player        @relation("PlayerGoalDataAssist1", fields: [assist1Id], references: [id])
  assist1Id       String
  assist2         Player        @relation("PlayerGoalDataAssist2", fields: [assist2Id], references: [id])
  assist2Id       String
  goalie          Player        @relation("PlayerGoalDataGoalie", fields: [goalieId], references: [id])
  goalieId        String
  team            Team          @relation("TeamGoalData", fields: [teamId], references: [id])
  teamId          String
  milestone       Milestone?    @relation("MilestoneGoalData", fields: [milestoneId], references: [id])
  milestoneId     String?

  @@unique([gamePk, eventId])
}

model Comment {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  content     String
  milestone   Milestone @relation("MilestoneHasComments", fields: [milestoneId], references: [id])
  milestoneId String
}

enum HighlightType {
  RECAP
  CONDENSED
  MILESTONE
}

model Highlight {
  id              String        @id @default(cuid())
  type            HighlightType
  videoId         Int           @unique
  title           String
  blurb           String
  description     String
  duration        Int
  mediaPlaybackId Int
  milestone       Milestone?    @relation("MilestoneHighlight", fields: [milestoneId], references: [id])
  milestoneId     String?
  gameRecap       Game?         @relation("GameHighlightRecap", fields: [gameRecapId], references: [id])
  gameRecapId     String?
  gameCondensed   Game?         @relation("GameHighlightCondensed", fields: [gameCondensedId], references: [id])
  gameCondensedId String?
  playbacks       Playback[]    @relation("HighlightHasPlaybacks")
}

model Playback {
  id          String    @id @default(cuid())
  name        String
  width       Int?
  height      Int?
  url         String    @unique
  highlight   Highlight @relation("HighlightHasPlaybacks", fields: [highlightId], references: [id])
  highlightId String
}
