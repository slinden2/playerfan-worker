// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

model User {
  id              String      @id @default(cuid())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  username        String      @unique
  usernameLower   String      @unique
  email           String      @unique
  passwordHash    String
  isVerified      Boolean
  role            Role        @default(USER)
  favoritePlayers Player[]    @relation("UserFavoritePlayers")
  likedHighlights Highlight[] @relation("UserLikesHighlight")
}

model Conference {
  id              String     @id @default(cuid())
  season          String
  conferenceIdApi Int
  link            String
  name            String
  shortName       String
  abbreviation    String
  active          Boolean
  divisions       Division[]
  teams           Team[]

  @@unique([season, conferenceIdApi])
}

model Division {
  id            String     @id @default(cuid())
  season        String
  divisionIdApi Int
  link          String
  name          String
  shortName     String
  abbreviation  String
  active        Boolean
  conference    Conference @relation(fields: [conferenceId], references: [id])
  conferenceId  String
  teams         Team[]

  @@unique([season, divisionIdApi])
}

model Team {
  id                 String          @id @default(cuid())
  season             String
  teamIdApi          Int
  link               String
  siteLink           String
  name               String
  teamName           String
  shortName          String
  abbreviation       String
  locationName       String
  firstYearOfPlay    Int
  officialSiteUrl    String
  active             Boolean
  twitterHashtag     String
  conference         Conference      @relation(fields: [conferenceId], references: [id])
  conferenceId       String
  division           Division        @relation(fields: [divisionId], references: [id])
  divisionId         String
  players            Player[]        @relation("TeamPlayer")
  awayGames          Game[]          @relation("TeamAwayGames")
  homeGames          Game[]          @relation("TeamHomeGames")
  linescores         Linescore[]     @relation("TeamLinescore")
  opponentLinescores Linescore[]     @relation("OpponentLinescore")
  highlights         Highlight[]     @relation("TeamHighlight")
  highlightsAgainst  Highlight[]     @relation("TeamHighlightAgainst")
  highlightMeta      HighlightMeta[] @relation("TeamHighlightMeta")

  @@unique([season, teamIdApi])
}

model Linescore {
  id                            String  @id @default(cuid())
  win                           Boolean
  otWin                         Boolean
  shootOutWin                   Boolean
  loss                          Boolean
  ot                            Boolean
  gamePk                        Int
  isHomeGame                    Boolean
  points                        Int
  goalsFor                      Int
  goalsAgainst                  Int
  penaltyMinutes                Int
  shotsFor                      Int
  shotsAgainst                  Int
  powerPlayGoals                Int
  powerPlayGoalsAllowed         Int
  powerPlayOpportunities        Int
  powerPlayOpportunitiesAgainst Int
  faceOffsTaken                 Int
  faceOffWins                   Int
  blocked                       Int
  takeaways                     Int
  giveaways                     Int
  team                          Team    @relation("TeamLinescore", fields: [teamId], references: [id])
  teamId                        String
  opponent                      Team    @relation("OpponentLinescore", fields: [opponentId], references: [id])
  opponentId                    String

  @@unique([gamePk, teamId])
}

enum ShootsCatches {
  L
  R
}

enum RosterStatus {
  N
  Y
}

enum Position {
  L
  G
  D
  R
  C
}

model Player {
  id                   String           @id @default(cuid())
  playerIdApi          Int              @unique
  firstName            String
  lastName             String
  primaryNumber        Int
  link                 String
  siteLink             String
  birthDate            DateTime
  birthCity            String
  birthStateProvince   String?
  birthCountry         String
  nationality          String
  height               Int
  weight               Int
  alternateCaptain     Boolean
  captain              Boolean
  rookie               Boolean
  shootsCatches        ShootsCatches
  rosterStatus         RosterStatus
  primaryPosition      Position
  active               Boolean
  currentTeam          Team             @relation("TeamPlayer", fields: [teamId], references: [id])
  teamId               String
  skaterBoxscores      SkaterBoxscore[] @relation("PlayerSkaterBoxscores")
  goalieBoxscores      GoalieBoxscore[] @relation("PlayerGoalieBoxscores")
  highlightMetaGoal    HighlightMeta[]  @relation("PlayerHighlightMetaGoal")
  highlightMetaAssist1 HighlightMeta[]  @relation("PlayerHighlightMetaAssist1")
  highlightMetaAssist2 HighlightMeta[]  @relation("PlayerHighlightMetaAssist2")
  highlightMetaGoalie  HighlightMeta[]  @relation("PlayerHighlightMetaGoalie")
  favoritedBy          User[]           @relation("UserFavoritePlayers", references: [id])
}

enum GameType {
  R
  P
}

model Game {
  id                   String           @id @default(cuid())
  gamePk               Int              @unique
  liveLink             String           @unique
  contentLink          String           @unique
  gameDate             DateTime
  apiDate              DateTime
  gameType             GameType
  awayScore            Int
  homeScore            Int
  boxscoresFetched     Boolean          @default(false)
  highlightsFetched    Boolean          @default(false)
  highlightMetaFetched Boolean          @default(false)
  awayTeam             Team             @relation("TeamAwayGames", fields: [awayTeamId], references: [id])
  awayTeamId           String
  homeTeam             Team             @relation("TeamHomeGames", fields: [homeTeamId], references: [id])
  homeTeamId           String
  skaterBoxscores      SkaterBoxscore[] @relation("GameSkaterBoxscores")
  goalieBoxscores      GoalieBoxscore[] @relation("GameGoalieBoxscores")
  highlight            Highlight[]      @relation("GameHighlight")
}

enum Decision {
  L
  W
}

model SkaterBoxscore {
  id                   String @id @default(cuid())
  gamePk               Int
  assists              Int
  goals                Int
  points               Int
  shots                Int
  hits                 Int
  powerPlayGoals       Int
  powerPlayAssists     Int
  penaltyMinutes       Int
  faceOffsTaken        Int
  faceOffWins          Int
  takeaways            Int
  giveaways            Int
  shortHandedGoals     Int
  shortHandedAssists   Int
  blocked              Int
  plusMinus            Int
  timeOnIce            Int
  evenTimeOnIce        Int
  powerPlayTimeOnIce   Int
  shortHandedTimeOnIce Int
  player               Player @relation("PlayerSkaterBoxscores", fields: [playerId], references: [id])
  playerId             String
  game                 Game   @relation("GameSkaterBoxscores", fields: [gameId], references: [id])
  gameId               String

  @@unique([gameId, playerId])
}

model GoalieBoxscore {
  id                      String    @id @default(cuid())
  gamePk                  Int
  timeOnIce               Int
  assists                 Int
  goals                   Int
  saves                   Int
  powerPlaySaves          Int
  shortHandedSaves        Int
  evenSaves               Int
  shortHandedShotsAgainst Int
  powerPlayShotsAgainst   Int
  decision                Decision?
  shotsAgainst            Int
  penaltyMinutes          Int
  savePct                 Float
  powerPlaySavePct        Float?
  shortHandedSavePct      Float?
  evenSavePct             Float?
  player                  Player    @relation("PlayerGoalieBoxscores", fields: [playerId], references: [id])
  playerId                String
  game                    Game      @relation("GameGoalieBoxscores", fields: [gameId], references: [id])
  gameId                  String

  @@unique([gameId, playerId])
}

enum VideoDataType {
  GOAL
  SHOT
}

enum PeriodType {
  REGULAR
  OVERTIME
  SHOOTOUT
}

enum HighlightType {
  RECAP
  CONDENSED
  MILESTONE
}

model Highlight {
  id                 String         @id @default(cuid())
  type               HighlightType
  gamePk             Int
  apiDate            DateTime
  videoIdApi         Int            @unique
  title              String
  blurb              String
  description        String
  duration           Int
  mediaPlaybackIdApi Int
  eventIdApi         Int?
  game               Game           @relation("GameHighlight", fields: [gameId], references: [id])
  gameId             String
  team               Team?          @relation("TeamHighlight", fields: [teamId], references: [id])
  teamId             String?
  opponent           Team?          @relation("TeamHighlightAgainst", fields: [opponentId], references: [id])
  opponentId         String?
  highlightMeta      HighlightMeta? @relation("HighlightHighlightMeta")
  playbacks          Playback[]     @relation("HighlightHasPlaybacks")
  comments           Comment[]      @relation("HighlightComment")
  likedBy            User[]         @relation("UserLikesHighlight")
}

model HighlightMeta {
  id              String        @id @default(cuid())
  gamePk          Int
  eventIdxApi     Int
  eventIdApi      Int
  gameWinningGoal Boolean
  emptyNet        Boolean
  type            VideoDataType
  shotType        String
  periodType      PeriodType
  periodTime      Int
  periodNumber    Int
  dateTime        DateTime
  coordX          Int
  coordY          Int
  scorer          Player        @relation("PlayerHighlightMetaGoal", fields: [scorerId], references: [id])
  scorerId        String
  assist1         Player        @relation("PlayerHighlightMetaAssist1", fields: [assist1Id], references: [id])
  assist1Id       String
  assist2         Player        @relation("PlayerHighlightMetaAssist2", fields: [assist2Id], references: [id])
  assist2Id       String
  goalie          Player        @relation("PlayerHighlightMetaGoalie", fields: [goalieId], references: [id])
  goalieId        String
  team            Team          @relation("TeamHighlightMeta", fields: [teamId], references: [id])
  teamId          String
  highlight       Highlight     @relation("HighlightHighlightMeta", fields: [highlightId], references: [id])
  highlightId     String

  @@unique([gamePk, eventIdApi])
}

model Comment {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  content     String
  highlight   Highlight @relation("HighlightComment", fields: [highlightId], references: [id])
  highlightId String
}

model PlaybackType {
  id        String     @id @default(cuid())
  name      String     @unique
  width     Int?
  height    Int?
  playbacks Playback[] @relation("PlaybackTypePlayback")
}

model Playback {
  id             String       @id @default(cuid())
  url            String       @unique
  type           PlaybackType @relation("PlaybackTypePlayback", fields: [playbackTypeId], references: [id])
  playbackTypeId String
  highlight      Highlight    @relation("HighlightHasPlaybacks", fields: [highlightId], references: [id])
  highlightId    String
}
